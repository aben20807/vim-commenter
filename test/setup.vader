Before:
  let s:commentMap = {
    \ 'c':      { 'll': '// ', 'bl': '/* ', 'br': ' */' },
    \ 'cpp':    { 'll': '// ', 'bl': '/* ', 'br': ' */' },
    \ 'html':   { 'bl': '<!-- ', 'br': ' -->'           },
    \ 'java':   { 'll': '// ', 'bl': '/* ', 'br': ' */' },
    \ 'lisp':   { 'll': '; '                            },
    \ 'make':   { 'll': '# '                            },
    \ 'prolog': { 'll': '% '                            },
    \ 'python': { 'll': '# '                            },
    \ 'rust':   { 'll': '// ', 'bl': '/* ', 'br': ' */' },
    \ 'sh':     { 'll': '# '                            },
    \ 'vim':    { 'll': '" '                            }
    \ }
  let ft = &filetype
  if exists('g:commenter_custom_map') && has_key(g:commenter_custom_map, ft)
    let b:formatMap = g:commenter_custom_map[ft]
  elseif has_key(s:commentMap, ft)
    let b:formatMap = s:commentMap[ft]
  endif
  for i in ['ll', 'bl', 'br']
    if !has_key(b:formatMap, i)
      let b:formatMap[i] = ''
      let b:isOnlyLineComment = 1
    endif
  endfor
  let b:ll = b:formatMap['ll']
  let b:bl = b:formatMap['bl']
  let b:br = b:formatMap['br']
