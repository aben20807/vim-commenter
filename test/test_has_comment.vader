Include: setup.vader

Given c(c without comment):
  int a;
Execute:
  AssertEqual 0, commenter#HasComment()

Given c(c with comment):
  // int a;
Execute:
  AssertEqual 1, commenter#HasComment()

Given cpp(cpp without comment):
  int a;
Execute:
  AssertEqual 0, commenter#HasComment()

Given cpp(cpp with comment):
  // int a;
Execute:
  AssertEqual 1, commenter#HasComment()

Given java(java without comment):
  int a;
Execute:
  AssertEqual 0, commenter#HasComment()

Given java(java with comment):
  // int a;
Execute:
  AssertEqual 1, commenter#HasComment()

Given lisp(lisp without comment):
  (+ 1 2)
Execute:
  AssertEqual 0, commenter#HasComment()

Given lisp(lisp with comment):
  ; (+ 1 2)
Execute:
  AssertEqual 1, commenter#HasComment()

Given make(make without comment):
  int a;
Execute:
  AssertEqual 0, commenter#HasComment()

Given make(make with comment):
  # int a;
Execute:
  AssertEqual 1, commenter#HasComment()

Given prolog(prolog without comment):
  write('yes'), nl.
Execute:
  AssertEqual 0, commenter#HasComment()

Given prolog(prolog with comment):
  % write('yes'), nl.
Execute:
  AssertEqual 1, commenter#HasComment()

Given python(python without comment):
  int a;
Execute:
  AssertEqual 0, commenter#HasComment()

Given python(python with comment):
  # int a;
Execute:
  AssertEqual 1, commenter#HasComment()

Given rust(rust without comment):
  let a: i32 = 0;
Execute:
  AssertEqual 0, commenter#HasComment()

Given rust(rust with comment):
  // let a: i32 = 0;
Execute:
  AssertEqual 1, commenter#HasComment()

Given sh(sh without comment):
  echo "OuO"
Execute:
  AssertEqual 0, commenter#HasComment()

Given sh(sh with comment):
  # echo "OuO"
Execute:
  AssertEqual 1, commenter#HasComment()

Given vim(vim without comment):
  let b:a = 'OuO';
Execute:
  AssertEqual 0, commenter#HasComment()

Given vim(vim with comment):
  " let b:a = 'OuO';
Execute:
  AssertEqual 1, commenter#HasComment()
